{"meta":{"title":"for_the_zero 的破站","subtitle":"","description":"","author":"for_the_zero","url":"https://for-the-zero.github.io","root":"/"},"pages":[],"posts":[{"title":"没有手机号？教你玩上chatGPT","slug":"没有手机号？教你玩上chatGPT","date":"2023-05-01T14:32:00.000Z","updated":"2023-05-01T15:17:07.708Z","comments":true,"path":"2023/05/01/没有手机号？教你玩上chatGPT/","link":"","permalink":"https://for-the-zero.github.io/2023/05/01/%E6%B2%A1%E6%9C%89%E6%89%8B%E6%9C%BA%E5%8F%B7%EF%BC%9F%E6%95%99%E4%BD%A0%E7%8E%A9%E4%B8%8AchatGPT/","excerpt":"","text":"没有手机号？教你玩上chatGPT我有两个方法，可点击左侧目录按钮跳转。 1. chatSonic(要科学上网)writesonic是一个ai写作工具，上线了chatGPT功能，叫chatSonic 登录方式：邮箱、谷歌等，无需手机号 首页点击chatSonic即可 免费限制10000词 2. 潘多拉利用openai隐藏的登录方式弄的 有多个共享账号供大家使用 限制1条10秒，用的人太多会报错","categories":[{"name":"教程","slug":"教程","permalink":"https://for-the-zero.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"科技","slug":"科技","permalink":"https://for-the-zero.github.io/tags/%E7%A7%91%E6%8A%80/"},{"name":"chatGPT","slug":"chatGPT","permalink":"https://for-the-zero.github.io/tags/chatGPT/"}],"author":"for_the_zero"},{"title":"想法","slug":"talking","date":"2023-05-01T13:57:00.000Z","updated":"2023-05-01T14:27:15.008Z","comments":true,"path":"2023/05/01/talking/","link":"","permalink":"https://for-the-zero.github.io/2023/05/01/talking/","excerpt":"","text":"（个人想法，可能有错） 教育中有些不合理的地方扬短避长人各有所长，亦各有所短 我们应发扬自己的长处，将长处放大，让长处覆盖短处，而不是把更少的长处和更少的短处放在一起，要把所有科目变为长处，不就成了“六边形战士”了？ 只看到一个人的缺点就说他不行，只有看到更多项优点才行，这合理吗？ 我记得在某本语文练习册或试卷上有篇阅读，内容是扬长避短。他举了个例子（凭记忆，懒得搜）：一个木匠连自己的床都修不好，却声称能盖房子，收的钱更多，别人不信，后来在一处工地看到了他，他在指挥建房，指挥有当，及其擅长。 再拿我来说。我近几年经常患肺炎和哮喘，每次体测1000米跑完腿脚酸痛，呼吸不畅，还是远低于及格线（及格&#x3D;满分）一分多。在写作上，你说我文笔不好，确实，很多文章都挺烂的，你说我文笔好，也确实，一两个擅长类型的文章都挺好的…… 脱离社会天天在学校的笼子里，没见过外面的一些东西。 如果你是学生，回答一下：你附近的超市里牛肉一斤卖多少。应该很多人回答不上，至少包括我。 有一件事：物理试卷上有到送分的计算题，第一小问问限速多少，图片给出一个圆圈圈着80（限速80km&#x2F;h），有人空了整道题（后面两问需要第一问），说没给限速是多少，怎么算，还问那个标志是什么意思…… 成绩决定一切成绩是算所有科目总分的，从扬长避短的角度出发，也有些不合理 而且我见过这些人：一个上课认真，考试紧张、粗心、急，错了不少，成绩不怎么好；另一个上课打打闹闹，考试成绩优秀…… 我觉得应该评判不该是考试，而是随时随地，但也有很多问题，例如主观性、方式、故意表现。教育真的没那么简单","categories":[],"tags":[{"name":"其它","slug":"其它","permalink":"https://for-the-zero.github.io/tags/%E5%85%B6%E5%AE%83/"}],"author":"for_the_zero"},{"title":"一种迷宫的介绍","slug":"一个迷宫的介绍","date":"2023-01-15T06:39:00.000Z","updated":"2023-01-19T08:00:50.404Z","comments":true,"path":"2023/01/15/一个迷宫的介绍/","link":"","permalink":"https://for-the-zero.github.io/2023/01/15/%E4%B8%80%E4%B8%AA%E8%BF%B7%E5%AE%AB%E7%9A%84%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"一种迷宫的介绍这个迷宫不是简单的迷宫，我和同学加过很多内容 我为什么要做这个：我有一个同学，是我的好朋友，在无聊的时候我们会在纸上玩点东西，例如井字棋，后来我们玩起了迷宫，并且不断地增加东西使它更难更好玩。只可惜到后来我们到了不同的学校，从此再也没有联系过，我挺想念他的…… 这个迷宫的介绍分为这几个内容： 基础理念 模块 其他 其中模块分为： 常用模块&#x2F;不常用模块（根据后来的使用频率分类） 一般模块&#x2F;特殊模块（根据模块的外观类型分类） 基础理念 内容 图 首先，我们要把它现象为三维的很多桥，不可以跳上也不可以跳下 它可以分叉、重叠（但必须窄的在上）等，宽窄和高度可以变换 两侧可以合并 套娃不止可以套一点点 可以在路中像这样分离出来 起点和终点： 内容 图 圆圈加箭头，方向标示起点与终点 可以有多个起点与终点 一个并不一定只表示起点或终点，也可以都表示，如图 模块一般模块：圈里带着其他内容或类似的 这里以使用频率分类，再到类型： 常用模块 不常用模块 常用模块以类型分类： 常用一般模块 常用特殊模块 常用一般模块字母传送圈里只带着字母，大写A~Z，最多26对，一对只能有两个，可以传送到另一个同字母的字母传送点 飞机传送一个简笔画飞机图标(如图)，并带一条传送线到另一个相同的图标 传送线不可以交叉，但是传送线和路之间可以交叉，只不过在交叉时要把路在表面上断开，实际上还是连接着的 后来我发现一个较为类似的东西： 同标传送长这样，可以传送到任意一个相同标志的传送点 常用特殊模块网状线条传送将路的一头接上正方形的传送方块。传送方块可以接入路或传送线，一共最多4个，至少一个，不能重叠，只能在4面延展 由传送方块和传送线组成的传送网络中我们可以快速移动到这个传送网络中接入的任意一条路 传送线不可以交叉，但是传送线和路之间可以交叉，只不过在交叉时要把路在表面上断开，实际上还是连接着的 后来我发现一个较为类似的东西： 隧道顾名思义，就是路在地里 地里的路用虚线表示，用一跟长于路宽的直(的)线(段)截断 在复杂的情况下可能比较难辨认，所以不能重叠 单向门顾名思义，只能单向通过，如图 直线隔空传送 样式如图 传送端是胶囊状的，内侧是同心圆，外侧是方向指示，箭头方向可变 被传送端在路头有方向指示，箭头方向可变 在同迷宫中两个箭头能接上才能传送 中间什么都可以有 不常用模块以类型分类： 不常用一般模块 不常用特殊模块 不常用一般模块文字圆圈+字母”T”+编号（从1开始） 在一旁用虚线划出注释区，在里面用 “T”+编号+”:”+内容 写出你要写的 圈内传送（自己看吧 左边的：在圈内的路可以传送到中间 右边的：传送到任意一条在圈内的路 圈可以用浅颜色或超细的线表示 电池限时完成片段（默认5秒，可额外标记） 以一个满电电池图标开启并开始计时，没电电池图标关闭，插头图标重置时间 三角翻面&lt;—– 翻面图标：三角形，但是上面有断口 就想象重力颠倒。到了同一条路的另一面，起点终点只在正面 或者这样理解：定义变量a，起点时a为0，遇到一个就a = 1 - a(0变1 1变0)，到终点时a == 0才行 三角计算（列到一般模块有点勉强） 自己定义4个整数类型变量tc_up tc_down tc_lift tc_right 分别为上下左右，默认值为0，不能为负 上 下 左 右 + 1 - 1 终点对它没要求，但锁有 锁：当上面的满足所有条件时才能通过（通过后不会清零），由锁+编号组成， 到注释区标注 tips（朋友不会玩建议加的） &lt;—– 圈中”Tips” 可获得作者正确的提示 不常用特殊模块平行世界用不同颜色画，各自独立，可以当作两个独立的迷宫，可以重叠 但也可以转换：如图 水池可插入路，根据水池方向，只上不下（可以同高度） 二值（新什么冠！ 分别是阴和阳，又是一个变量，和三角翻面差不多但又有区别 描述 图 转阴 转羊 阴时不能通过转阴，阳时不能通过转阳 起点和终点都是阳 突变转换：跳过”阴不转阴，阳不转阳”的单向转换结构 会分出五条路，被浅分割线分割的，三个一边的是阴，两个一边的是阳 浅分割线用浅颜色或超细的线表示 其他如果是在本子上画，可以画出一些花样 把纸挖空一部分，盖上这页字和翻开这页字都走得通 画到纸的边缘，另一面接着 两张纸中间也可以续 使用向后传送门传送到纸张背后同一位置 折一下纸，让它无论是打开还是关闭、翻到左边还是右边都能接上 可以无解（不建议 ……","categories":[{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"DearPyGui笔记","slug":"DearPyGui笔记","date":"2023-01-14T12:20:00.000Z","updated":"2023-01-14T12:21:55.032Z","comments":true,"path":"2023/01/14/DearPyGui笔记/","link":"","permalink":"https://for-the-zero.github.io/2023/01/14/DearPyGui%E7%AC%94%E8%AE%B0/","excerpt":"","text":"DearPyGui 笔记一个好用的 Python GUI模块 基于原文档总结出来的 没有的内容（原版文档看不懂的）Slots · Basic Example · Container Stack · Scene Graph · 3D Operations · querying · custom series · resizing · stretch · … 总体 基础主脚本必须始终 事件 代码 注释 导入 import dearpygui.dearpygui as dpg 创建上下文 dpg.create_context() 如果不是第一个 DPG不会启动&#x2F;崩溃 创建窗口 with dpg.window(label=&quot;标题&quot;): 组件 创建视区 dpg.create_viewport(title=&#39;大窗口标题&#39;, width=宽, height=高) 需要使用create_viewport创建该视区 并使用show_viewport显示 设置dearpygui dpg.setup_dearpygui() 显示该视口中 dpg.show_viewport() 启动dearpygui dpg.start_dearpygui() 清理环境 dpg.destroy_context() 创建窗口with dpg.window(label=&quot;标题&quot;, pos=位置（数组）):+组件 导入窗口 直接 间接 在create_context与create_viewport中间用from xxx import * 使用文件写入自定义 被导入文件内容（可能）只需要import dearpygui.dearpygui as dpg和窗口内容 使用文件写入自定义123with open(&#x27;./helper.py&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f: # healper.py 是用于帮助导入的文件 f.write(&#x27;from &#123;file&#125; import *&#x27;.format(file=&#x27;testing&#x27;)) # 写入（间接导入）from helper import * 主窗口（不必要）将填充该视口并始终绘制在其他窗口的后面且铺满视图，自动去除标题栏 123456with dpg.window(tag=&quot;Primary Window&quot;):...dpg.show_viewport()dpg.set_primary_window(&quot;Primary Window&quot;, True)dpg.start_dearpygui()... 图标1234567891011121314151617import dearpygui.dearpygui as dpgdpg.create_context()with dpg.window(label=&quot;Example Window&quot;, width=500, height=150): dpg.add_text(&quot;Hello, world&quot;)dpg.create_viewport(title=&#x27;Custom Title&#x27;, width=600, height=200) # create viewport takes in config options too!# must be called before showing viewportdpg.set_viewport_small_icon(&quot;path/to/icon.ico&quot;)dpg.set_viewport_large_icon(&quot;path/to/icon.ico&quot;)dpg.setup_dearpygui()dpg.show_viewport()dpg.start_dearpygui()dpg.destroy_context() dpg.set_viewport_large_icon()设置大图标 dpg.set_viewport_small_icon()设置小图标 组件：辅助标签系统（tag）12345678with dpg.window(label=&quot;Tutorial&quot;): b0 = dpg.add_button(label=&quot;button 0&quot;) b1 = dpg.add_button(tag=100, label=&quot;Button 1&quot;) dpg.add_button(tag=&quot;Btn2&quot;, label=&quot;Button 2&quot;)print(b0)print(b1)print(dpg.get_item_label(&quot;Btn2&quot;)) xxx = dpg.add_xxx(...) unique_tag = dpg.generate_uuid() # 在 create_context 前 dpg.add_xxx(... , tag=xxx) 可以赋值给变量 可以添加tag（dpg.get_item_label()调用） 所有项目都必须具有关联的唯一ID(UUID)，该ID可以是整数或字符串 创建项目时会自动生成标签，如果以后与组件交互，则存储此标签 dpg.last_ { item(组件) , container(容器) , root(根) } () 获取最新的对应项 容器12345678910with dpg.window(label=&quot;Tutorial&quot;): dpg.add_button(label=&quot;Button 1&quot;) dpg.add_button(label=&quot;Button 2&quot;) with dpg.group(): dpg.add_button(label=&quot;Button 3&quot;) dpg.add_button(label=&quot;Button 4&quot;) with dpg.group() as group1: passdpg.add_button(label=&quot;Button 6&quot;, parent=group1)dpg.add_button(label=&quot;Button 5&quot;, parent=group1) 在with dpg.group():内添加组件到组 也可以在外部dpg.add_…(…parent=容器名) 编辑属性123btn = dpg.add_button(label=&quot;Apply 2&quot;) #创建dpg.set_item_label(btn, &quot;Button 57&quot;) #修改label(标签)dpg.set_item_width(btn, 200) #修改高度 代码 功能 get_item_配置 控制其外观和行为的关键字(标签、回调、宽度、高度) get_item_状态 反映其交互的关键字(可见、悬停、点击等) get_item_信息 反映其信息的关键字(项目类型、子项、主题等) 回调12345678910def button_callback(sender, app_data, user_data): ...with dpg.window(label=&quot;Tutorial&quot;): # 按钮创建时创建回调 dpg.add_button(label=&quot;Apply&quot;, callback=button_callback, user_data=&quot;Some Data&quot;) # 按钮创建后创建回调 btn = dpg.add_button(label=&quot;Apply 2&quot;, ) dpg.set_item_callback(btn, button_callback) dpg.set_item_user_data(btn, &quot;Some Extra User Data&quot;) 用callback赋值函数创建 输入函数：同位置赋值 用dpg.set_item_callback链接 输入函数：set_item_赋值以链接 输入值 功能 sender 发送回调组件的id app_data 大多数为组件当前值 user_data （可选）传输自己的数据 dpg.add_xxx(…callback=…, user_data=…)dpg.set_item_user_data() 不在主线程上运行 1234567891011121314151617181920import dearpygui.dearpygui as dpgdpg.create_context()dpg.configure_app(manual_callback_management=True) #设置dpg.create_viewport()dpg.setup_dearpygui()def callback(sender, app_data, user_data): print(&quot;Called on the main thread!&quot;)with dpg.window(label=&quot;Tutorial&quot;): dpg.add_button(label=&quot;Press me&quot;, callback=callback) dpg.show_viewport()# 主循环while dpg.is_dearpygui_running(): jobs = dpg.get_callback_queue() # 获取 dpg.run_callbacks(jobs) # 运行 dpg.render_dearpygui_frame()dpg.destroy_context() 使用dpg.configure_app(manual_callback_management=True)设置 在主循环内用 xxx = dpg.get_callback_queue()获取 使用dpg.run_callbacks(xxx)运行 组件值123456789101112131415with dpg.window(width=300): input_txt = dpg.add_input_text( label=&quot;InputTxt&quot;, default_value=&quot;This is a default value!&quot;, # 默认值 ) slider_float = dpg.add_slider_float( label=&quot;SliderFloat&quot;, default_value=50.0, # 默认值 ) dpg.add_slider_int(default_value=15, tag=&quot;slider_int&quot;) # 获取值 print(dpg.get_value(input_txt)) print(dpg.get_value(slider_float)) dpg.set_value(&quot;slider_int&quot;, 40) # 设置值 添加默认值：default_value 获取值：get_value(赋值为组件的变量) 设置值：set_value(tag,值) 侦听与事件123456789101112def change_text(sender, app_data): if dpg.is_item_hovered(&quot;text item&quot;): #组件侦听 dpg.set_value(&quot;text item&quot;, f&quot;爬开!!&quot;) else: dpg.set_value(&quot;text item&quot;, f&quot;把鼠标放我上面!&quot;)with dpg.handler_registry(): dpg.add_mouse_move_handler(callback=change_text) #鼠标移动侦听with dpg.window(width=500, height=300): dpg.add_text(&quot;把鼠标放我上面!&quot;, tag=&quot;text item&quot;) # 添加文本 12345678def change_text(sender, app_data): dpg.set_value(&quot;text item&quot;, f&quot;Mouse Button ID: &#123;app_data&#125;&quot;)with dpg.window(width=500, height=300): dpg.add_text(&quot;Click me with any mouse button&quot;, tag=&quot;text item&quot;) with dpg.item_handler_registry(tag=&quot;widget handler&quot;) as handler: # 监听器设置 dpg.add_item_clicked_handler(callback=change_text) # 鼠标点击监听器并设置回调 dpg.bind_item_handler_registry(&quot;text item&quot;, &quot;widget handler&quot;) # 监听器绑定 设置监听器with dpg.item_handler_registry(tag=&quot;监听器名&quot;) as handler: 添加事件dpg.add_item_…_handler(callback=回调) 绑定监听器dpg.bind_item_handler_registry(&quot;组件tag&quot;, &quot;监听器tag&quot;) 组件事件： 名称 译意 Activated 激活 Active 活跃 Clicked 点击 Deactivated 停用 Deactivated After Edited 编辑后停用 Focus 聚焦 Hover 悬停 Resize 调整大小 Toggled 切换 Visible 可见 全局事件： 名称 译意 ——Keys—— ——以下为键盘的操作—— Down 按下 Press 按（Down+Release） Release 释放 ——Mouse—— ——以下为鼠标的操作—— Click 单击 Double Click 双击 Down 按下 Drag 拖动 Move 移动 Release 抬起 Wheel 滚轮 添加和删除组件 添加:回调dpg.add_xxx 删除：dpg.delete_item(&quot;tag&quot;) 注：删除容器时，默认情况下会删除该容器及其子项，除非delete_item中children_only设置为True时不会删除该容器 属性编辑123with dpg.window(width=500, height=300): dpg.add_button(enabled=True, label=&quot;Press me&quot;, tag=&quot;item&quot;) dpg.configure_item(&quot;item&quot;, enabled=False, label=&quot;New Label&quot;) dpg.configure_item编辑属性 dpg.get_item_configuration获取属性（字典类型） 值注册器12345678910with dpg.value_registry(): dpg.add_bool_value(default_value=True, tag=&quot;bool_value&quot;) dpg.add_string_value(default_value=&quot;Default string&quot;, tag=&quot;string_value&quot;)with dpg.window(label=&quot;Tutorial&quot;): dpg.add_checkbox(label=&quot;Radio Button1&quot;, source=&quot;bool_value&quot;) dpg.add_checkbox(label=&quot;Radio Button2&quot;, source=&quot;bool_value&quot;) dpg.add_input_text(label=&quot;Text Input 1&quot;, source=&quot;string_value&quot;) dpg.add_input_text(label=&quot;Text Input 2&quot;, source=&quot;string_value&quot;, password=True) 在with dpg.value_register():中定义 定义：dpg.add_类型{ bool(布尔) , string(字符串) }_value(default_value=默认值, tag=&quot;tag&quot;) 使用：dpg.add_xxx(… , source=&quot;对应的tag&quot;) 其他开发工具1234567891011121314151617import dearpygui.dearpygui as dpgdpg.create_context()# startdpg.show_documentation()dpg.show_style_editor()dpg.show_debug()dpg.show_about()dpg.show_metrics()dpg.show_font_manager()dpg.show_item_registry()# enddpg.create_viewport(title=&#x27;Custom Title&#x27;, width=800, height=600)dpg.setup_dearpygui()dpg.show_viewport()dpg.start_dearpygui()dpg.destroy_context() 其中几个： 代码 功能 dpg.show_style_editor() 样式编辑器 dpg.show_item_registry() 组件信息查看器 dpg.show_font_manager() 字体管理器 dpg.show_metrics() 性能监视器 渲染循环12345678910111213import dearpygui.dearpygui as dpgdpg.create_context()dpg.create_viewport(title=&#x27;Custom Title&#x27;, width=600, height=200)dpg.setup_dearpygui()with dpg.window(label=&quot;Example Window&quot;): dpg.add_text(&quot;Hello, world&quot;)dpg.show_viewport()# here ↓while dpg.is_dearpygui_running(): print(&quot;每一帧都会运行这里&quot;) dpg.render_dearpygui_frame()# here ↑dpg.destroy_context() dpg.is_dearpygui_running()判断 dpg 是否运行dpg.render_dearpygui_frame()让 dpg 渲染一帧 组件 简单组件 代码 功能 dpg.add_button(label=&quot;名称&quot;) 按钮 dpg.add_slider_int&#x2F;float(label=&quot;名称&quot;, width=限制) 滑块 dpg.add_text(&quot;xxx&quot;) 文本 dpg.add_input_text(label=&quot;xxx&quot;) 文本输入 dpg.add_checkbox(label=&quot;xx&quot;, callback=xxx) 复选框 dpg.add_color_picker(label=&quot;xxx&quot;, callback=xxx) 颜色选择 容器和上下文管理器 核心代码 上下文管理器 翻译 add_table with table(…): 表格 add_table_row with table_row(…): 表格_行 add_window with window(…): 窗口 add_menu_bar with menu_bar(…): 菜单栏 add_child with child(…): 子项 add_clipper with clipper(…): ？ add_collapsing_header with collapsing_header(…): ？ add_colormap_registry with colormap_registry(…): color map 注册表 ？ add_group with group(…): 组 add_node with node(…): 节点 ？ add_node_attribute with node_attribute(…): 节点属性 ？ add_node_editor with node_editor(…): 节点编辑器 ？ add_staging_container with staging_container(…): staging 容器 ？ add_tab_bar with tab_bar(…): 标签栏&#x2F;选项卡栏 add_tab with tab(…): 标签&#x2F;选项卡 add_tree_node with tree_node(…): 树状节点？ add_tooltip with tooltip(…): 工具提示 add_popup with popup(…): 弹出 add_drag_payload with payload(…): ？ add_drawlist with drawlist(…): 绘图列表 add_draw_layer with draw_layer(…): 绘图层 add_viewport_drawlist with viewport_drawlist(…): 视口绘图列表？&#96; add_file_dialog with file_dialog(…): 文件对话框 add_filter_set with filter_set(…): 筛选器 add_font with font(…): 字体 add_font_registry with font_registry(…): 字体注册 add_handler_registry with handler_registry(…): handler 注册器？ add_plot with plot(…): ？ add_subplots with subplots(…): 子plot？ add_texture_registry with texture_registry(…): 纹理注册器 add_value_registry with value_registry(…): 值注册器 add_theme with theme(…): 主题 add_item_pool with item_pool(…): 组件池？ add_template_registry with template_registry(…): 模板注册器 demo: 12345678910111213141516with dpg.window(label=&quot;Main&quot;): with dpg.menu_bar(): with dpg.menu(label=&quot;Themes&quot;): dpg.add_menu_item(label=&quot;Dark&quot;) dpg.add_menu_item(label=&quot;Light&quot;) dpg.add_menu_item(label=&quot;Classic&quot;) with dpg.menu(label=&quot;Other Themes&quot;): dpg.add_menu_item(label=&quot;Purple&quot;) dpg.add_menu_item(label=&quot;Gold&quot;) dpg.add_menu_item(label=&quot;Red&quot;) with dpg.menu(label=&quot;Tools&quot;): dpg.add_menu_item(label=&quot;Show Logger&quot;) dpg.add_menu_item(label=&quot;Show About&quot;) with dpg.menu(label=&quot;Oddities&quot;): dpg.add_button(label=&quot;A Button&quot;) dpg.add_simple_plot(label=&quot;Menu plot&quot;, default_value=(0.3, 0.9, 2.5, 8.9), height=80) 123456789101112131415w = dpg.add_window(label=&quot;Main&quot;)mb = dpg.add_menu_bar(parent=w)themes = dpg.add_menu(label=&quot;Themes&quot;, parent=mb)dpg.add_menu_item(label=&quot;Dark&quot;, parent=themes)dpg.add_menu_item(label=&quot;Light&quot;, parent=themes)other_themes = dpg.add_menu(label=&quot;Other Themes&quot;, parent=themes)dpg.add_menu_item(label=&quot;Purple&quot;, parent=other_themes)dpg.add_menu_item(label=&quot;Gold&quot;, parent=other_themes)dpg.add_menu_item(label=&quot;Red&quot;, parent=other_themes)tools = dpg.add_menu(label=&quot;Tools&quot;, parent=mb)dpg.add_menu_item(label=&quot;Show Logger&quot;, parent=tools)dpg.add_menu_item(label=&quot;Show About&quot;, parent=tools)oddities = dpg.add_menu(label=&quot;Oddities&quot;, parent=mb)dpg.add_button(label=&quot;A Button&quot;, parent=oddities)dpg.add_simple_plot(label=&quot;A menu plot&quot;, default_value=(0.3, 0.9, 2.5, 8.9), height=80, parent=oddities) 123456789101112131415dpg.add_window(label=&quot;Main&quot;, tag=&quot;w&quot;)dpg.add_menu_bar(parent=&quot;w&quot;, tag=&quot;mb&quot;)dpg.add_menu(label=&quot;Themes&quot;, parent=&quot;mb&quot;, tag=&quot;themes&quot;)dpg.add_menu_item(label=&quot;Dark&quot;, parent=&quot;themes&quot;)dpg.add_menu_item(label=&quot;Light&quot;, parent=&quot;themes&quot;)dpg.add_menu(label=&quot;Other Themes&quot;, parent=&quot;themes&quot;, tag=&quot;other_themes&quot;)dpg.add_menu_item(label=&quot;Purple&quot;, parent=&quot;other_themes&quot;)dpg.add_menu_item(label=&quot;Gold&quot;, parent=&quot;other_themes&quot;)dpg.add_menu_item(label=&quot;Red&quot;, parent=&quot;other_themes&quot;)dpg.add_menu(label=&quot;Tools&quot;, parent=&quot;mb&quot;, tag=&quot;tools&quot;)dpg.add_menu_item(label=&quot;Show Logger&quot;, parent=&quot;tools&quot;)dpg.add_menu_item(label=&quot;Show About&quot;, parent=&quot;tools&quot;)dpg.add_menu(label=&quot;Oddities&quot;, parent=&quot;mb&quot;, tag=&quot;Oddities&quot;)dpg.add_button(label=&quot;A Button&quot;, parent=&quot;Oddities&quot;)dpg.add_simple_plot(label=&quot;A menu plot&quot;, default_value=(0.3, 0.9, 2.5, 8.9), height=80, parent=&quot;Oddities&quot;) 123456789101112131415dpg.push_container_stack(dpg.add_window(label=&quot;Main&quot;))dpg.push_container_stack(dpg.add_menu_bar())dpg.push_container_stack(dpg.add_menu(label=&quot;Themes&quot;))dpg.add_menu_item(label=&quot;Dark&quot;)dpg.add_menu_item(label=&quot;Light&quot;)dpg.pop_container_stack()dpg.push_container_stack(dpg.add_menu(label=&quot;Tools&quot;))dpg.add_menu_item(label=&quot;Show Logger&quot;)dpg.add_menu_item(label=&quot;Show About&quot;)dpg.pop_container_stack()# remove menu_bar from container stackdpg.pop_container_stack()# remove window from container stackdpg.pop_container_stack()&lt;/details&gt; 容器槽 代码 功能 is_item_container 检查是否为容器类型 get_item_slot 返回项目的槽 get_item_parent 返回项目的父UUID get_item_children 返回项的子项 reorder_items 在一次调用中重新排序子项 move_item_up 将组件在其槽内上移 move_item_down 将组件在其槽内下移 move_item 在容器之间移动组件 set_item_children 将一个舞台移到一个组件的子槽中 绘图API 绘图命令可以添加到DrawList、VIEPORT_DrawList或窗口等容器中 创建一个绘图列表项 add_drawlist ，可以调用绘制命令来添加项 坐标系是右手坐标系，原点位于左上角，x轴指向左侧，y轴指向下方，z轴指向屏幕 123with dpg.window(label=&quot;xxx&quot;): with dpg.drawlist(width=xxx, height=xxx): ... 图层 在with dpg.draw_layer():中添加内容 dpg.draw_layer():内可添加tag 图像 可以显示PNG、JPEG或BMP类型的图像 使用DRAW_IMAGE添加图像。 使用 pmin 和 pmax 我们可以定义矩形的左上角和右下角区域 图像将缩放以适合指定区域。 使用 uv_min 和 uv_max 我们可以指定规格化的纹理坐标，以仅使用图像上区域的一部分。默认为uv_min= [0,0] 和UV_max= [1,1]将在UV_MIN=[0,0]时显示整个图像,UV_max= [0.5,0.5]将仅显示绘图的第一个四分之一。 123456789101112# 加载图片width, height, channels, data = dpg.load_image(&#x27;xxx.png&#x27;) # 0: width, 1: height, 2: channels, 3: data#注册图片with dpg.texture_registry(): dpg.add_static_texture(width, height, data, tag=&quot;image_id&quot;)with dpg.window(label=&quot;Tutorial&quot;): with dpg.drawlist(width=700, height=700): # 绘制*3 dpg.draw_image(&quot;image_id&quot;, (0, 400), (200, 600), uv_min=(0, 0), uv_max=(1, 1)) dpg.draw_image(&quot;image_id&quot;, (400, 300), (600, 500), uv_min=(0, 0), uv_max=(0.5, 0.5)) dpg.draw_image(&quot;image_id&quot;, (0, 0), (300, 300), uv_min=(0, 0), uv_max=(2.5, 2.5)) 加载图片：四个变量 = dpg.load_image(&#39;图片路径&#39;) 注册图片：with dpg.texture_registry():\\n dpg.add_static_texture(前面四个变量, tag=&quot;图片id&quot;) 使用图片： dpg.draw_image(&quot;图片id&quot;,左上、右下位置，uv规格化) 窗口与视口123456789with dpg.viewport_drawlist(): dpg.draw_circle((100, 100), 25, color=(255, 255, 255, 255)) # 置顶 dpg.add_viewport_drawlist(front=False, tag=&quot;viewport_back&quot;)dpg.draw_circle((200, 200), 25, color=(255, 255, 255, 255), parent=&quot;viewport_back&quot;) # 置底with dpg.window(label=&quot;Tutorial&quot;, width=300, height=300): dpg.add_text(&quot;Move the window over the drawings to see the effects.&quot;, wrap=300) dpg.draw_circle((100, 100), 25, color=(255, 255, 255, 255)) # 窗口内 窗口内：跟随窗口 一般dpg.viewport_drawlist内：置顶 带有viewport_backtag的dpg.viewport_drawlist内：置底 文件和目录选择器(dpg内部) 可用于选择单个文件、多个文件或目录，当用户单击 Ok 按钮，则运行对话框的回调。 信息通过APP_DATA参数传递，例如：文件路径 文件名 当前路径 当前过滤器(文件类型过滤器) 12345678def callback(sender, app_data): print(&quot;Sender: &quot;, sender) print(&quot;App Data: &quot;, app_data)dpg.add_file_dialog(directory_selector=True, show=False, callback=callback, tag=&quot;file_dialog_id&quot;)with dpg.window(label=&quot;Tutorial&quot;, width=800, height=300): dpg.add_button(label=&quot;Directory Selector&quot;, callback=lambda: dpg.show_item(&quot;file_dialog_id&quot;)) Sender: xxx App Data: {‘file_path_name’: ‘xxx’, —文件路径 ‘file_name’: ‘xxx’, —文件名 ‘current_path’: ‘xxx’, —当前路径 ‘current_filter’: ‘xxx’, —当前过滤器 ‘min_size’: [xxx, xxx], —最大大小 ‘max_size’: [xxx, xxx], —最小大小 ‘selections’: {‘xxx’: ‘xxx’}} —选择该文件&#x2F;目录的相对路径和绝对路径 callback=lambda: dpg.show_item(&quot;file_dialog_id&quot;) 扩展名123456with dpg.file_dialog(directory_selector=False, show=False, callback=callback, id=&quot;file_dialog_id&quot;): dpg.add_file_extension(&quot;.*&quot;) dpg.add_file_extension(&quot;&quot;, color=(150, 255, 150, 255)) dpg.add_file_extension(&quot;Source files (*.cpp *.h *.hpp)&#123;.cpp,.h,.hpp&#125;&quot;, color=(0, 255, 255, 255)) dpg.add_file_extension(&quot;.h&quot;, color=(255, 0, 255, 255), custom_text=&quot;[header]&quot;) dpg.add_file_extension(&quot;.py&quot;, color=(0, 255, 0, 255), custom_text=&quot;[Python]&quot;) 懒得写了，自己看 :D 加点别的1234567891011121314151617181920212223242526272829import dearpygui.dearpygui as dpgdpg.create_context()def callback(sender, app_data): print(&quot;Sender: &quot;, sender) print(&quot;App Data: &quot;, app_data)with dpg.file_dialog(directory_selector=False, show=False, callback=callback, tag=&quot;file_dialog_tag&quot;): dpg.add_file_extension(&quot;.*&quot;) dpg.add_file_extension(&quot;&quot;, color=(150, 255, 150, 255)) dpg.add_file_extension(&quot;.cpp&quot;, color=(255, 255, 0, 255)) dpg.add_file_extension(&quot;.h&quot;, color=(255, 0, 255, 255)) dpg.add_file_extension(&quot;.py&quot;, color=(0, 255, 0, 255)) with dpg.group(horizontal=True): dpg.add_button(label=&quot;fancy file dialog&quot;) dpg.add_button(label=&quot;file&quot;) dpg.add_button(label=&quot;dialog&quot;) dpg.add_date_picker() with dpg.child_window(height=100): dpg.add_selectable(label=&quot;bookmark 1&quot;) dpg.add_selectable(label=&quot;bookmark 2&quot;) dpg.add_selectable(label=&quot;bookmark 3&quot;)with dpg.window(label=&quot;Tutorial&quot;, width=800, height=300): dpg.add_button(label=&quot;File Selector&quot;, callback=lambda: dpg.show_item(&quot;file_dialog_tag&quot;))dpg.create_viewport(title=&#x27;Custom Title&#x27;, width=800, height=600)dpg.setup_dearpygui()dpg.show_viewport()dpg.start_dearpygui()dpg.destroy_context() 在里面加组或子窗口 选择多个文件通过在dpg.file_dialog设置file_count（数量限制）关键字来选择多个文件 Ctrl&#x2F;Shift 选择 过滤器&#x2F;搜寻1234567891011121314def callback(sender, filter_string): dpg.set_value(&quot;filter_id&quot;, filter_string)with dpg.window(label=&quot;about&quot;, width =500, height=300): dpg.add_input_text(label=&quot;Filter (inc, -exc)&quot;, callback=callback) with dpg.filter_set(id=&quot;filter_id&quot;): dpg.add_text(&quot;aaa1.c&quot;, filter_key=&quot;aaa1.c&quot;, bullet=True) dpg.add_text(&quot;bbb1.c&quot;, filter_key=&quot;bbb1.c&quot;, bullet=True) dpg.add_text(&quot;ccc1.c&quot;, filter_key=&quot;ccc1.c&quot;, bullet=True) dpg.add_text(&quot;aaa2.cpp&quot;, filter_key=&quot;aaa2.cpp&quot;, bullet=True) dpg.add_text(&quot;bbb2.cpp&quot;, filter_key=&quot;bbb2.cpp&quot;, bullet=True) dpg.add_text(&quot;ccc2.cpp&quot;, filter_key=&quot;ccc2.cpp&quot;, bullet=True) dpg.add_text(&quot;abc.h&quot;, filter_key=&quot;abc.h&quot;, bullet=True) dpg.add_text(&quot;hello, world&quot;, filter_key=&quot;hello, world&quot;, bullet=True) 设置： with dpg.filter_set(id=&quot;id&quot;): dpg.add_xxx(…, filter_key=&quot;xxx&quot;, bullet=True) 使用： dpg.add_input_text(…, callback=xxx) callback: def xxx(…,filter_string): dpg.set_value(&quot;id&quot;, filter_string) 字体默认字体：ProggyClean.ttf 12345678910111213# 注册字体with dpg.font_registry(): # .ttf or .otf file default_font = dpg.add_font(&quot;xxx.otf&quot;, 20) second_font = dpg.add_font(&quot;xxx.otf&quot;, 10)with dpg.window(label=&quot;Font Example&quot;, height=200, width=200): dpg.add_button(label=&quot;Default font&quot;) b2 = dpg.add_button(label=&quot;Secondary font&quot;) dpg.add_button(label=&quot;default&quot;) dpg.bind_font(default_font) # 设为默认 dpg.bind_item_font(b2, second_font) # 专门指定 注册： 默认情况下，仅添加基本拉丁语和拉丁语补充字形(0x0020-0x00FF) with dpg.font_registry(): xxx = dpg.add_font(&quot;path&quot;, pixel[px]) 添加其他字形： 123456789101112131415161718192021with dpg.font(&quot;xxx.otf&quot;, 20) as font: # 添加默认字形 dpg.add_font_range_hint(dpg.mvFontRangeHint_Default) # 其他字形 # mvFontRangeHint_Japanese # mvFontRangeHint_Korean # mvFontRangeHint_Chinese_Full # mvFontRangeHint_Chinese_Simplified_Common # mvFontRangeHint_Cyrillic # mvFontRangeHint_Thai # mvFontRangeHint_Vietnamese dpg.add_font_range_hint(dpg.mvFontRangeHint_Japanese) # 添加区间字形 dpg.add_font_range(0x3100, 0x3ff0) # 添加指定字形 dpg.add_font_chars([0x3105, 0x3107, 0x3108]) # 刷新区间字形 dpg.add_char_remap(0x3084, 0x0025) 设置： 设为默认：dpg.bind_font(xxx) 专门指定：dpg.bind_item_font(item, xxx) 附：Unicode Characters 菜单栏视口菜单栏：with dpg.viewport_menu_bar(): 窗口菜单栏：with dpg.menu_bar(): 里面的内容： with dpg.menu(label=&quot;xxx&quot;): dpg.add_menu_item 其他组件也可以 dpg.add_menu_item(label=&quot;xxx&quot;, callback=xxx) node 编辑器它有4个主要组成部分 node编辑器:node所在的区域 node:包含属性的自由浮动“窗口” 属性:带有Pins的小部件集合，用于创建指向&#x2F;来自的链接，可以是输入、输出或静态 链接:属性之间的连接 属性可以包含任何UI项。当用户单击并拖动node的属性时，将运行编辑器的回调。DPG将属性的标记通过 app_data 回调参数 12345678910111213141516171819202122232425# 连接属性时运行回调def link_callback(sender, app_data): # app_data -&gt; (link_id1, link_id2) dpg.add_node_link(app_data[0], app_data[1], parent=sender)# 断开属性时运行回调def delink_callback(sender, app_data): # app_data -&gt; link_id dpg.delete_item(app_data)with dpg.window(label=&quot;Tutorial&quot;, width=400, height=400): with dpg.node_editor(callback=link_callback, delink_callback=delink_callback): with dpg.node(label=&quot;Node 1&quot;): with dpg.node_attribute(label=&quot;Node A1&quot;): dpg.add_input_float(label=&quot;F1&quot;, width=150) with dpg.node_attribute(label=&quot;Node A2&quot;, attribute_type=dpg.mvNode_Attr_Output): dpg.add_input_float(label=&quot;F2&quot;, width=150) with dpg.node(label=&quot;Node 2&quot;): with dpg.node_attribute(label=&quot;Node A3&quot;): dpg.add_input_float(label=&quot;F3&quot;, width=200) with dpg.node_attribute(label=&quot;Node A4&quot;, attribute_type=dpg.mvNode_Attr_Output): dpg.add_input_float(label=&quot;F4&quot;, width=200) 在with dpg.node_editor(callback=link_callback, delink_callback=delink_callback):内添加内容在with dpg.node(label=&quot;xxx&quot;):内添加node在with dpg.node_attribute(label=&quot;xxx&quot;):内添加属性 选择查询检索选定的node和链接(并使用以下命令清除此选择) 1234dpg.get_selected_nodes(editor_id)dpg.get_selected_links(editor_id)dpg.clear_selected_nodes(editor_id)dpg.clear_selected_links(editor_id) 属性类型以下常量可用于 attribute_type 属性的参数 123mvNode_Attr_Input # (默认)mvNode_Attr_OutputmvNode_Attr_Static 属性形状以下常量可用于shape节点属性的参数 123456mvNode_PinShape_CirclemvNode_PinShape_CircleFilled #(默认)mvNode_PinShape_TrianglemvNode_PinShape_TriangleFilledmvNode_PinShape_QuadmvNode_PinShape_QuadFilled 绘制图表地块由多个组件组成。 Y轴：这是一个容器，是添加到绘图中的所有数据系列的父级。打印一次可以有多个Y轴(最多3个)。 X轴：这是x数据刻度(只允许1个x轴)。 系列：要显示的数据的容器。需要将数据系列添加为要在绘图上显示的Y轴的子项。有许多不同类型的数据系列可用。系列还可以包含当右键单击图例中的系列标签作为上下文菜单时将显示的UI项 图例(可选)： 这是一个普通的图例，ALOS允许用户切换哪些数据序列是可见的。 绘图具有一些内置功能： 切换数据系列：单击所需数据系列的图例名称进行切换设置：双击鼠标右键平移绘图：在绘图上单击并拖动平移轴：在轴上单击并拖动缩放：滚动鼠标滚轮缩放轴：悬停轴和滚动鼠标滚轮缩放区域：单击鼠标右键并拖动最大化显示：双击缩放轴区域：按住Shift键并单击鼠标右键并拖动 添加数据12345sindatax = []sindatay = []for i in range(0, 500): sindatax.append(i / 1000) sindatay.append(0.5 + 0.5 * sin(50 * i / 1000)) 使用.append() 创建视图：with dpg.plot(label=&quot;xxx&quot;, height=xxx, width=xxx): 可选择创建图例：dpg.add_plot_legend() 创建x、y轴：dpg.add_plot_axis(dpg.mvXAxis, label=&quot;x&quot;)和dpg.add_plot_axis(dpg.mvYAxis, label=&quot;y&quot;, tag=&quot;y_axis&quot;) 添加系列（内容，可添加多个）：dpg.add_line_series(数据（前面的sindatax和sindatay）, label=&quot;x&quot;, parent=&quot;y&quot;) 更新数据 dpg.add_line_series中添加tag dpg.set_value(&#39;tag&#39;, [x和y]) dpg.set_item_label(&#39;tag&#39;, &quot;值&quot;) 轴限制以下命令可用于控制地块轴限制 1234set_axis_limits(...)get_axis_limits(...)set_axis_limits_auto(...)fit_axis_data(...) 例子： 12345678910111213141516171819202122232425with dpg.window(label=&quot;Tutorial&quot;, width=400, height=400): with dpg.group(horizontal=True): dpg.add_button(label=&quot;fit y&quot;, callback=lambda: dpg.fit_axis_data(&quot;y_axis&quot;)) dpg.add_button(label=&quot;unlock x limits&quot;, callback=lambda: dpg.set_axis_limits_auto(&quot;x_axis&quot;)) dpg.add_button(label=&quot;unlock y limits&quot;, callback=lambda: dpg.set_axis_limits_auto(&quot;y_axis&quot;)) dpg.add_button(label=&quot;print limits x&quot;, callback=lambda: print(dpg.get_axis_limits(&quot;x_axis&quot;))) dpg.add_button(label=&quot;print limits y&quot;, callback=lambda: print(dpg.get_axis_limits(&quot;y_axis&quot;))) with dpg.plot(label=&quot;Bar Series&quot;, height=-1, width=-1): dpg.add_plot_legend() # create x axis dpg.add_plot_axis(dpg.mvXAxis, label=&quot;Student&quot;, no_gridlines=True, tag=&quot;x_axis&quot;) dpg.set_axis_limits(dpg.last_item(), 9, 33) dpg.set_axis_ticks(dpg.last_item(), ((&quot;S1&quot;, 11), (&quot;S2&quot;, 21), (&quot;S3&quot;, 31))) # create y axis dpg.add_plot_axis(dpg.mvYAxis, label=&quot;Score&quot;, tag=&quot;y_axis&quot;) dpg.set_axis_limits(&quot;y_axis&quot;, 0, 110) # add series to y axis dpg.add_bar_series([10, 20, 30], [100, 75, 90], label=&quot;Final Exam&quot;, weight=1, parent=&quot;y_axis&quot;) dpg.add_bar_series([11, 21, 31], [83, 75, 72], label=&quot;Midterm Exam&quot;, weight=1, parent=&quot;y_axis&quot;) dpg.add_bar_series([12, 22, 32], [42, 68, 23], label=&quot;Course Grade&quot;, weight=1, parent=&quot;y_axis&quot;)dpg.create_viewport(title=&#x27;Custom Title&#x27;, width=800, height=600)dpg.setup_dearpygui()dpg.show_viewport()dpg.start_dearpygui()dpg.destroy_context() 自定义轴标签可以使用设置轴标签set_axis_ticks，可以使用reset_axis_ticks重置它们 1234567891011# create x axisdpg.add_plot_axis(dpg.mvXAxis, label=&quot;Student&quot;, no_gridlines=True)dpg.set_axis_ticks(dpg.last_item(), ((&quot;S1&quot;, 11), (&quot;S2&quot;, 21), (&quot;S3&quot;, 31)))# create y axisdpg.add_plot_axis(dpg.mvYAxis, label=&quot;Score&quot;, tag=&quot;yaxis_tag&quot;)# add series to y axisdpg.add_bar_series([10, 20, 30], [100, 75, 90], label=&quot;Final Exam&quot;, weight=1, parent=&quot;yaxis_tag&quot;)dpg.add_bar_series([11, 21, 31], [83, 75, 72], label=&quot;Midterm Exam&quot;, weight=1, parent=&quot;yaxis_tag&quot;)dpg.add_bar_series([12, 22, 32], [42, 68, 23], label=&quot;Course Grade&quot;, weight=1, parent=&quot;yaxis_tag&quot;) 多个y轴（最多3个y轴） 123456789# create y axis 1dpg.add_plot_axis(dpg.mvYAxis, label=&quot;y1&quot;)dpg.add_line_series(sindatax, sindatay, label=&quot;y1 lines&quot;, parent=dpg.last_item())# create y axis 2dpg.add_plot_axis(dpg.mvYAxis, label=&quot;y2&quot;)dpg.add_stem_series(sindatax, sindatay, label=&quot;y2 stem&quot;, parent=dpg.last_item())# create y axis 3dpg.add_plot_axis(dpg.mvYAxis, label=&quot;y3 scatter&quot;)dpg.add_scatter_series(sindatax, sindatay, label=&quot;y3&quot;, parent=dpg.last_item()) 注释使用dpg.add_plot_annotation()标记 内容： label：里面的文字 default_value=(x, y)：默认值 offset=(x, y)：偏移，离指向的位置，用直线指出，可省略 color=[rgba]：标记的颜色 clamped：固定（当视角不包含该点时标签在边缘显示），可省略（默认True） 可拖动的点和线 点：dpg.add_drag_point()（用元组表示坐标） 线：dpg.add_drag_line()（用浮点数表示坐标） 内容： label：里面的文字 color=[rgba]：标记的颜色 default_value：默认值 callback：回调（获取：dpg.get_value(sender)） vertical：（线）纵向，默认True 自定义右键菜单 右击图例中对应项时弹出的菜单 在dpg.add_line_series后添加组件，并parent=指向其 例子： 123dpg.add_line_series(sindatax, sindatay, label=&quot;series 1&quot;, parent=&quot;yaxis&quot;, tag=&quot;series_1&quot;)dpg.add_button(label=&quot;Delete Series 1&quot;, parent=dpg.last_item(), callback=lambda: dpg.delete_item(&quot;series_1&quot;)) 主题详见下面的## 主题 在前面加with dpg.theme(tag=&quot;xxx&quot;): 添加主题的对象with dpg.theme_component(dpg.mvStemSeries&#x2F;dpg.mvScatterSeries&#x2F;…): 主题的内容 在图标里用dpg.bind_item_theme(&quot;图表系列tag&quot;, &quot;主题tag&quot;)应用 主题的内容： 颜色：dpg.add_theme_color(dpg.mvPlotCol_Line, (rgb), category=dpg.mvThemeCat_Plots) 点的形状：dpg.add_theme_style(dpg.mvPlotStyleVar_Marker, dpg.mvPlotMarker_Diamond&#x2F;Square&#x2F;…, category=dpg.mvThemeCat_Plots) 点的大小：dpg.add_theme_style(dpg.mvPlotStyleVar_MarkerSize, int, category=dpg.mvThemeCat_Plots) 弹出窗口 右键菜单：在with dpg.popup(链接到组件（例如dpg.last_item()）) 全屏警示框：设置modal=True（默认False） 按键：mousebutton=添加 dpg.mvMouseButton_Left左键 dpg.mvMouseButton_right右键（默认） _mvMouseButton_Middle_中键 _mvMouseButton_X1_X1 _mvMouseButton_X2_X2 将窗口作为弹出窗口： 创建：with dpg.window(label=&quot;xxx&quot;, modal=True, show=False, tag=&quot;tag&quot;, no_title_bar=True): 调用：callback=lambda: dpg.configure_item(&quot;tag&quot;, show=True) 简易图表添加：dpg.add_simple_plot(label=&quot;xxx&quot;, default_value=(int&#x2F;float), height=xxx) 参数： 柱状（默认线状）：histogram=True&quot; 覆盖在图表顶部的文字：overlay=&quot;xxx&quot; 更新数值： dpg.set_value(&quot;tag&quot;, 更新后列表) 暂存12345678910def stage_items(): # 存入 with dpg.stage(tag=&quot;stage1&quot;): dpg.add_text(&quot;hello, i was added from a stage&quot;, tag=&quot;text_tag&quot;)def present_stage_items(): # 导出 dpg.move_item(&quot;text_tag&quot;, parent=&quot;main_win&quot;)with dpg.window(label=&quot;Tutorial&quot;, tag=&quot;main_win&quot;): dpg.add_button(label=&quot;stage items&quot;, callback=stage_items) dpg.add_button(label=&quot;present stages items&quot;, callback=present_stage_items) 存储：在dpg.stage():内添加有tag的组件 清理：使用dpg.unstage(&quot;tag&quot;)和dpg.pop_container_stack() 使用类(class)包装项示例： 123456789101112131415161718192021222324class Window: def __init__(self, label): self._children = [] with dpg.stage() as stage: self.id = dpg.add_window(label=label) self.stage = stage def add_child(self, child): dpg.move_item(child.id, parent=self.id) def submit(self): dpg.unstage(self.stage)class Button: def __init__(self, label): with dpg.stage(): self.id = dpg.add_button(label=label) def set_callback(self, callback): dpg.set_item_callback(self.id, callback)my_button = Button(&quot;Press me&quot;)my_button.set_callback(lambda: print(&quot;I&#x27;ve been pressed!&quot;))my_window = Window(&quot;Tutorial&quot;)my_window.add_child(my_button)my_window.submit() 123456789101112131415161718192021class Button: def __init__(self, label): with dpg.stage() as self._staging_container_id: self._id = dpg.add_button(label=label) def set_callback(self, callback): dpg.set_item_callback(self._id, callback) def get_label(self): return dpg.get_item_label(self._id) def submit(self, parent): dpg.push_container_stack(parent) dpg.unstage(self._staging_container_id) dpg.pop_container_stack()my_button = Button(&quot;Press me&quot;)my_button.set_callback(lambda: print(&quot;I&#x27;ve been pressed!&quot;))print(my_button.get_label())with dpg.window(label=&quot;Tutorial&quot;, tag=&quot;main_win&quot;): dpg.add_text(&quot;hello world&quot;)my_button.submit(&quot;main_win&quot;) 表格基础工作 创建：with dpg.table(): 添加列：dpg.add_table_column(label)（最多64） 添加行内容：with dpg.table_row():（添加组件） 添加单元格：with dpg.table_cell():（行和列内）（相当于在这一行这一列里&lt;br/&gt;） 边框&#x2F;背景在dpg.table(加上以下内容) 关键字 解释 borders_innerH 内边框H borders_innerV 内边框V borders_outerH 外边框H borders_outerV 外边框V row_background 每一行颜色交错 （H：横向，V：竖向） 列标题在dpg.table(中把header_row设置为True ) 将显示dpg.add_table_column()的label 列选项 关键字 默认值 描述 init_width_or_weight 0.0 设置列的起始宽度(固定策略)或比例(拉伸) default_hide False 默认为隐藏&#x2F;禁用列 default_sort False 默认为排序列 width_stretch False 列将被拉伸。最好是禁用水平滚动（如果表格的尺寸是_SizingStretchSame或_SizingStretchProp则默认）。 width_fixed False 列将不会被拉伸。最好是启用水平滚动（如果表的尺寸是_SizingFixedFit且表可调整大小，则默认） no_resize False 禁用手动调整大小 no_reorder False 禁用此列的手动重新排序，这也将防止其他列与此列交叉 no_hide False 禁用隐藏&#x2F;禁用此列的功能 no_clip False 禁用此列的剪裁 no_sort False 禁用此列的排序 no_sort_ascending False 禁用按升序排序的功能 no_sort_descending False 禁用按降序排序的功能 no_header_width False 禁用页眉文本宽度对自动列宽的影响 prefer_sort_ascending True 在此列上首次排序时将初始排序方向设置为升序(默认) prefer_sort_descending False 在此列上首次排序时，将初始排序方向设置为降序 indent_enabled False 输入单元格时使用当前缩进值(第0列默认) indent_disable False 输入单元格时忽略当前的缩进值（默认为列&gt;0）。在单元格内的缩进变化仍将被尊重(?) ###列排序 在dpg.table添加属性sortable=True和callback 不要排序的列添加属性no_sort=True（默认False） 自定义排序 排序回调示例： 12345678910111213141516171819202122232425262728293031323334def sort_callback(sender, sort_specs): # sort_specs scenarios: # 1. no sorting -&gt; sort_specs == None # 2. single sorting -&gt; sort_specs == [[column_id, direction]] # 3. multi sorting -&gt; sort_specs == [[column_id, direction], [column_id, direction], ...] # # notes: # 1. direction is ascending if == 1 # 2. direction is ascending if == -1 # no sorting case if sort_specs is None: return rows = dpg.get_item_children(sender, 1) # create a list that can be sorted based on first cell # value, keeping track of row and value used to sort sortable_list = [] for row in rows: first_cell = dpg.get_item_children(row, 1)[0] sortable_list.append([row, dpg.get_value(first_cell)]) def _sorter(e): return e[1] sortable_list.sort(key=_sorter, reverse=sort_specs[0][1] &lt; 0) # create list of just sorted row ids new_order = [] for pair in sortable_list: new_order.append(pair[0]) dpg.reorder_items(sender, 1, new_order) 裁剪优化性能 123456789101112131415def clipper_toggle(sender): dpg.configure_item(&quot;table_clip&quot;, clipper=dpg.get_value(sender))with dpg.window(label=&quot;Tutorial&quot;): dpg.add_checkbox(label=&quot;clipper&quot;, callback=clipper_toggle, default_value=True) with dpg.table(header_row=False, tag=&quot;table_clip&quot;, clipper=True): for i in range(5): dpg.add_table_column() for i in range(30000): with dpg.table_row(): for j in range(5): dpg.add_text(f&quot;Row&#123;i&#125; Column&#123;j&#125;&quot;) dpg.table添加属性clipper=True 添加dpg.configure_item(&quot;tag&quot;, clipper=True) 纹理提供3种类型的纹理：静态的、原始纹理、动态的 可以在以下组件中使用纹理：mvDrawImage、mvImage、mvImageButton、mvImageSeries 它们总是一维列表或数组 使用关键字Show将打开纹理注册表 静态纹理用于不经常更改的图像，通常在启动时加载 如果需要更新它们，您可以删除并重新创建它们。它们可以是列表、元组、NumPy数组，以及支持具有连续数据的Python缓冲区协议的任何类型 例子： 123456789101112texture_data = []for i in range(0, 100 * 100): texture_data.append(255 / 255) texture_data.append(0) texture_data.append(255 / 255) texture_data.append(255 / 255)with dpg.texture_registry(show=True): dpg.add_static_texture(width=100, height=100, default_value=texture_data, tag=&quot;texture_tag&quot;)with dpg.window(label=&quot;Tutorial&quot;): dpg.add_image(&quot;texture_tag&quot;) 动态纹理用于每帧可以更改的中小型纹理 可以使用set_value更新这些选项，但宽度和高度必须与第一次创建纹理时相同 除了执行安全检查和转化外，这些纹理与原始纹理相似 例子： 123456789101112131415161718192021222324252627282930texture_data = []for i in range(0, 100 * 100): texture_data.append(255 / 255) texture_data.append(0) texture_data.append(255 / 255) texture_data.append(255 / 255)with dpg.texture_registry(show=True): dpg.add_dynamic_texture(width=100, height=100, default_value=texture_data, tag=&quot;texture_tag&quot;)def _update_dynamic_textures(sender, app_data, user_data): new_color = dpg.get_value(sender) new_color[0] = new_color[0] / 255 new_color[1] = new_color[1] / 255 new_color[2] = new_color[2] / 255 new_color[3] = new_color[3] / 255 new_texture_data = [] for i in range(0, 100 * 100): new_texture_data.append(new_color[0]) new_texture_data.append(new_color[1]) new_texture_data.append(new_color[2]) new_texture_data.append(new_color[3]) dpg.set_value(&quot;texture_tag&quot;, new_texture_data)with dpg.window(label=&quot;Tutorial&quot;): dpg.add_image(&quot;texture_tag&quot;) dpg.add_color_picker((255, 0, 255, 255), label=&quot;Texture&quot;, no_side_preview=True, alpha_bar=True, width=200, callback=_update_dynamic_textures) 原始纹理使用方式与动态纹理相同，但只接受数组(NumPy、PYTHON等)且不执行任何安全检查。 这些纹理用于需要每帧更新大型纹理的高性能应用程序 123456789101112131415161718192021222324252627import arraytexture_data = []for i in range(0, 100 * 100): texture_data.append(255 / 255) texture_data.append(0) texture_data.append(255 / 255) texture_data.append(255 / 255)raw_data = array.array(&#x27;f&#x27;, texture_data)with dpg.texture_registry(show=True): dpg.add_raw_texture(width=100, height=100, default_value=raw_data, format=dpg.mvFormat_Float_rgba, tag=&quot;texture_tag&quot;)def update_dynamic_texture(sender, app_data, user_data): new_color = dpg.get_value(sender) new_color[0] = new_color[0] / 255 new_color[1] = new_color[1] / 255 new_color[2] = new_color[2] / 255 new_color[3] = new_color[3] / 255 for i in range(0, 100 * 100 * 4): raw_data[i] = new_color[i % 4]with dpg.window(label=&quot;Tutorial&quot;): dpg.add_image(&quot;texture_tag&quot;) dpg.add_color_picker((255, 0, 255, 255), label=&quot;Texture&quot;, no_side_preview=True, alpha_bar=True, width=200, callback=update_dynamic_texture) 格式支持： 格式化 静态纹理 动态纹理 原始纹理 mvFormat_Float_rgba ✅ ✅ ✅ mvFormat_Float_rgb ✅ mvFormat_Int_rgba mvFormat_Int_rgba 加载图像使用load_image文件加载图像数据 此函数返回一个元组，其中 0-&gt;宽度 1-&gt;高度 2-&gt;途径 3-&gt;DATA(一维数组，mvBuffer) 如果失败，则返回 None 。 接受的文件类型包括： JPEG(无12位&#x2F;通道JPEG或采用算术编码的JPEG) PNG BMP PSD GIF HDR PIC PPM PGM 例子： 1234567width, height, channels, data = dpg.load_image(&quot;xxx.png&quot;)with dpg.texture_registry(show=True): dpg.add_static_texture(width=width, height=height, default_value=data, tag=&quot;texture_tag&quot;)with dpg.window(label=&quot;Tutorial&quot;): dpg.add_image(&quot;texture_tag&quot;) 保存图像使用save_image将图像数据保存到文件。 该图像是从左到右、从上到下存储的像素的矩形。每个像素最多包含4个数据分量，每个通道8位交织，顺序如下：1&#x3D;Y、2&#x3D;YA、3&#x3D;RGB、4&#x3D;RGBA（y表示单色） PNG创建的输出文件具有与输入相同数量的组件，BMP格式将文件格式中的Y扩展为RGB且不输出Alpha。 接受的文件类型包括： PNG JPG BMP TGA HDR 文件类型由扩展名决定。必须为小写(PNG、JPG、BMP、TGA、HDR)。 例子： 1234567891011121314width, height = 255, 255data = []for i in range(width*height): data.append(255) data.append(255) data.append(0)with dpg.window(label=&quot;Tutorial&quot;): dpg.add_button(label=&quot;Save Image&quot;, callback=lambda:dpg.save_image(file=&quot;newImage.png&quot;, width=width, height=height, data=data, components=3))dpg.show_viewport()while dpg.is_dearpygui_running(): dpg.render_dearpygui_frame() 主题主题是由以下内容组成的容器： 主题组件：是主题中的容器，可以指定主题颜色&#x2F;样式的目标项目类型 主题颜色：添加到主题组件并设置颜色的项 主题样式：添加到主题组件并设置样式的项目 主题可以： 绑定为默认主题。这将在所有窗口中产生全局效果 绑定到一个容器。如果适用的主题组件在该主题中，将应用到它的子项 如果主题中有适用的主题组件，则绑定到项类型、项容器或特定项 主题组件必须具有指定的项目类型。这可以是MvAll适用于所有组件或特定组件类型。 样式和颜色项目有一个命名的常量，并将该常量应用于其组件的命名项目类型。风格和颜色项目必须有一个命名的类别，常量在名称中包含其类别 主题颜色和样式分为以下类别： mvThemeCat_Plots ：与绘图关联的项目。标识的样式&#x2F;颜色常量： mvPlotCol_*或mvPlotStyle_* mvThemeCat_Nodes ：与bode关联的项。标识的样式&#x2F;颜色常量： mvNodeCol_*或mvNodeStyle_* mvThemeCat_Core ：所有其他在dearpygui内组件。标识的样式&#x2F;颜色常量 ：mvThemeCol_*或mvThemeStyle_* 可参考dpg.show_style_editor() 默认主题(全局)将在所有窗口中全局应用该主题，并适用于子窗口 1234567891011with dpg.theme() as global_theme: with dpg.theme_component(dpg.mvAll): dpg.add_theme_color(dpg.mvThemeCol_FrameBg, (255, 140, 23), category=dpg.mvThemeCat_Core) dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 5, category=dpg.mvThemeCat_Core) with dpg.theme_component(dpg.mvInputInt): dpg.add_theme_color(dpg.mvThemeCol_FrameBg, (140, 255, 23), category=dpg.mvThemeCat_Core) dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 5, category=dpg.mvThemeCat_Core)dpg.bind_theme(global_theme) 只特定于组件将主题应用于特定组件，将覆盖该指定项之前的任何主题 123456789with dpg.window(label=&quot;Tutorial&quot;, pos=(20, 50), width=275, height=225) as win1: t = dpg.add_input_text(default_value=&quot;some text&quot;) with dpg.theme() as item_theme: with dpg.theme_component(dpg.mvAll): dpg.add_theme_color(dpg.mvThemeCol_FrameBg, (200, 200, 100), category=dpg.mvThemeCat_Core) dpg.add_theme_style(dpg.mvStyleVar_FrameRounding, 0, category=dpg.mvThemeCat_Core)dpg.bind_item_theme(t, item_theme) 主题的优先顺序应用的主题的优先顺序按以下顺序排列: 具体组件 继承的容器 全局 禁用组件的主题每个组件都有单独的禁用主题，在禁用时会使用该主题 如果未设置禁用主题，则将使用默认禁用主题 组件加enabled=False with dpg.theme_xxx():添加参数enabled_state=False 标记图表图形 参数 意 mvPlotMarker_None 无 mvPlotMarker_Circle 圆圈 mvPlotMarker_Square 方形 mvPlotMarker_Diamond 钻石形 mvPlotMarker_Up 上 mvPlotMarker_Down 下 mvPlotMarker_Left 左 mvPlotMarker_Right 右 mvPlotMarker_Cross 叉号 mvPlotMarker_Plus 加号 mvPlotMarker_Asterisk 星号 支持颜色的 参数 意 mvThemeCol_Text 文本 mvThemeCol_TabActive 激活Tab mvThemeCol_SliderGrabActive 滑块抓取活动 mvThemeCol_TextDisabled 已禁用的文本 mvThemeCol_TabUnfocused 未聚焦Tab mvThemeCol_Button 按钮 mvThemeCol_WindowBg 窗口背景 mvThemeCol_TabUnfocusedActive 激活未聚焦Tab mvThemeCol_ButtonHovered 被鼠标悬停的按钮 mvThemeCol_ChildBg 子背景 mvThemeCol_DockingPreview ？ mvThemeCol_ButtonActiv 被点击的按钮 mvThemeCol_Border 边缘 mvThemeCol_DockingEmptyBg ？ mvThemeCol_Header 标题 mvThemeCol_PopupBg ？ mvThemeCol_PlotLines 图表的线 mvThemeCol_HeaderHovered 被悬停的标题 mvThemeCol_BorderShadow 边缘阴影 mvThemeCol_PlotLinesHovered 被悬停的图表的线 mvThemeCol_HeaderActive 激活的标题？ mvThemeCol_FrameBg ？ mvThemeCol_PlotHistogram 图表直方图 mvThemeCol_Separator 分隔符 mvThemeCol_FrameBgHovered ？ mvThemeCol_PlotHistogramHovered 被悬停的图表直方图 mvThemeCol_SeparatorHovered 被悬停的分隔符 mvThemeCol_FrameBgActive ？ mvThemeCol_TableHeaderBg 表头背景 mvThemeCol_SeparatorActive 激活的分隔符？ mvThemeCol_TitleBg 标题背景 mvThemeCol_SeparatorTableBorderStrong ？ mvThemeCol_ResizeGrip ？ mvThemeCol_TitleBgActive 激活的标题背景？ mvThemeCol_TableBorderLight ？ mvThemeCol_ResizeGripHovered ？ mvThemeCol_TitleBgCollapsed 崩溃的标题背景？ mvThemeCol_TableRowBg 表格行背景 mvThemeCol_ResizeGripActive ？ mvThemeCol_MenuBarBg 菜单栏背景 mvThemeCol_TableRowBgAlt 表格行背景符号？ mvThemeCol_Tab Tab mvThemeCol_ScrollbarBg 滚动栏背景 mvThemeCol_TextSelectedBg 文本选择背景 mvThemeCol_TabHovered 被悬停的Tab mvThemeCol_ScrollbarGrab ？ mvThemeCol_DragDropTarget 拖动目标 mvThemeCol_ScrollbarGrabHovered ？ mvThemeCol_NavHighlight 导航栏高亮 mvThemeCol_ScrollbarGrabActive ？ mvThemeCol_NavWindowingHighlight 导航栏窗口高亮？ mvThemeCol_CheckMark 打勾？ mvThemeCol_NavWindowingDimBg ？ mvThemeCol_SliderGrab ？ mvThemeCol_ModalWindowDimBg ？ 图表颜色 参数 意 mvPlotCol_Line 线 mvPlotCol_LegendBg 图例背景 mvPlotCol_YAxisGrid Y轴网格 mvPlotCol_Fill 填充 mvPlotCol_LegendBorder 图例边框 mvPlotCol_YAxis2 Y轴2 mvPlotCol_MarkerOutline ？ mvPlotCol_LegendText ？ mvPlotCol_YAxisGrid2 Y轴网格2 mvPlotCol_MarkerFill 标记填充 mvPlotCol_TitleText 标题文本 mvPlotCol_YAxis3 Y轴3 mvPlotCol_ErrorBar 错误栏 mvPlotCol_InlayText ？ mvPlotCol_YAxisGrid3 Y轴网格3 mvPlotCol_FrameBg ？ mvPlotCol_XAxis X轴 mvPlotCol_Selection 选择器 mvPlotCol_PlotBg 图表背景 mvPlotCol_XAxisGrid X轴网格 mvPlotCol_Query 查询 mvPlotCol_PlotBorder 图表边框 mvPlotCol_YAxis Y轴 mvPlotCol_Crosshairs 十字线（坐标） node颜色 参数 意 mvNodeCol_NodeBackground Node背景 mvNodeCol_TitleBarSelected 已选择标题栏 mvNodeCol_BoxSelector 盒子选择器 mvNodeCol_NodeBackgroundHovered 被悬停的Node背景 mvNodeCol_Link 链接 mvNodeCol_BoxSelectorOutline ？ mvNodeCol_NodeBackgroundSelected 已选择Note背景 mvNodeCol_LinkHovered 被悬停的链接 mvNodeCol_GridBackground 网格背景 mvNodeCol_NodeOutline ？ mvNodeCol_LinkSelected 已选择背景 mvNodeCol_GridLine 网格线 mvNodeCol_TitleBar 标题栏 mvNodeCol_Pin 钉 mvNodeCol_PinHovered 已悬停的钉 mvNodeCol_TitleBarHovered 已悬停的标题栏 核心样式 参数 组件 意 mvStyleVar_Alpha 1 透明度 mvStyleVar_WindowPadding 2 窗口填充 mvStyleVar_WindowRounding 1 窗口圆角 mvStyleVar_WindowBorderSize 1 窗口边缘大小 mvStyleVar_WindowMinSize 2 窗口最小大小 mvStyleVar_WindowTitleAlign 2 窗口标题对齐 mvStyleVar_ChildRounding 1 子边距 mvStyleVar_ChildBorderSize 1 子边缘大小 mvStyleVar_PopupRounding 1 ？ mvStyleVar_PopupBorderSize 1 ？ mvStyleVar_FramePadding 2 ？ mvStyleVar_FrameRounding 1 ？ mvStyleVar_FrameBorderSize 1 ？ mvStyleVar_ItemSpacing 2 组件间隔 mvStyleVar_ItemInnerSpacing 2 组件内间隔 mvStyleVar_IndentSpacing 1 缩进间隔 mvStyleVar_CellPadding 2 ？ mvStyleVar_ScrollbarSize 1 滚动条大小 mvStyleVar_ScrollbarRounding 1 滚动条圆角 mvStyleVar_GrabMinSize 1 ？ mvStyleVar_GrabRounding 1 ？ mvStyleVar_TabRounding 1 Tab圆角 mvStyleVar_ButtonTextAlign 2 按钮文本对齐 mvStyleVar_SelectableTextAlign 2 可选文本对齐 打印样式 参数 组件 意 mvPlotStyleVar_LineWeight 1 线宽 mvPlotStyleVar_Marker 1 标记 mvPlotStyleVar_MarkerSize 1 标记大小 mvPlotStyleVar_MarkerWeight 1 标记宽 mvPlotStyleVar_FillAlpha 1 填充透明度 mvPlotStyleVar_ErrorBarSize 1 错误栏大小 mvPlotStyleVar_ErrorBarWeight 1 错误栏宽度 mvPlotStyleVar_DigitalBitHeight 1 ？ mvPlotStyleVar_DigitalBitGap 1 ？ mvPlotStyleVar_PlotBorderSize 1 图表边框大小 mvPlotStyleVar_MinorAlpha 1 ？ mvPlotStyleVar_MajorTickLen 2 ？ mvPlotStyleVar_MinorTickLen 2 ？ mvPlotStyleVar_MajorTickSize 2 ？ mvPlotStyleVar_MinorTickSize 2 ？ mvPlotStyleVar_MajorGridSize 2 ？ mvPlotStyleVar_MinorGridSize 2 ？ mvPlotStyleVar_PlotPadding 2 图表填充 mvPlotStyleVar_LabelPadding 2 标签填充 mvPlotStyleVar_LegendPadding 2 图例填充 mvPlotStyleVar_LegendInnerPadding 2 内图例填充 mvPlotStyleVar_LegendSpacing 2 图例边距 mvPlotStyleVar_MousePosPadding 2 鼠标位置填充 mvPlotStyleVar_AnnotationPadding 2 注释填充 mvPlotStyleVar_FitPadding 2 ？ mvPlotStyleVar_PlotDefaultSize 2 图表默认大小 mvPlotStyleVar_PlotMinSize 2 图表最小大小 Node样式 参数 组件 意 mvNodeStyleVar_GridSpacing 1 网格间距 mvNodeStyleVar_NodeCornerRounding 1 Node边角圆角 mvNodeStyleVar_NodePaddingHorizontal 1 Node横向填充 mvNodeStyleVar_NodePaddingVertical 1 Node竖向填充 mvNodeStyleVar_NodeBorderThickness 1 边缘大小 mvNodeStyleVar_LinkThickness 1 链接厚度 mvNodeStyleVar_LinkLineSegmentsPerLength 1 链接线长 mvNodeStyleVar_LinkHoverDistance 1 链接悬停距离 mvNodeStyleVar_PinCircleRadius 1 钉 圆半径 mvNodeStyleVar_PinQuadSideLength 1 钉 四边形长 mvNodeStyleVar_PinTriangleSideLength 1 钉 三角形边长 mvNodeStyleVar_PinLineThickness 1 钉 线条厚度 mvNodeStyleVar_PinHoverRadius 1 钉 悬停半径 mvNodeStyleVar_PinOffset 1 钉 偏移 工具提示是当项目悬停时显示的窗口，可以保存任何其他组件的容器，必须具有父参数 123dpg.add_text(&quot;Hover me&quot;, tag=&quot;tooltip_parent&quot;)with dpg.tooltip(&quot;tooltip_parent&quot;): dpg.add_text(&quot;A tooltip&quot;)","categories":[{"name":"Dev","slug":"Dev","permalink":"https://for-the-zero.github.io/categories/Dev/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://for-the-zero.github.io/tags/Python/"},{"name":"Dev","slug":"Dev","permalink":"https://for-the-zero.github.io/tags/Dev/"}]},{"title":"关于","slug":"关于","date":"2023-01-14T06:46:00.000Z","updated":"2023-05-01T14:30:48.195Z","comments":true,"path":"2023/01/14/关于/","link":"","permalink":"https://for-the-zero.github.io/2023/01/14/%E5%85%B3%E4%BA%8E/","excerpt":"","text":"for_the_zero我，站长一只中学牲 ——————– 就……凭兴趣搞的 但是要是内容有更新，我不一定会改例如上面那行 我不太会搞 写过:scratch(不想搞了)python(边写边学)html(不怎么会) 偶尔写几篇文章文笔不好，但文章重要的是内容 内容啥都有 内容可能是→ 自己感兴趣的教程问题解决乱发的…… 评论区：issues 博客： Github Pages Netlify Vercel link link link 较慢 国内推荐 国外推荐（国内被墙） 网盘： Github Pages Vercel link link 联系作者： 平台 链接或id 哔哩哔哩 for_the_zero 邮箱 forthezero@outlook.com GitHub for-the-zero 稽木世界(scratch社区,不怎么玩了) forthezero 别的 我想想 其他看上一篇","categories":[{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/tags/%E5%85%B6%E4%BB%96/"}],"author":"for_the_zero"},{"title":"终于搭好了","slug":"Test-1","date":"2023-01-12T13:13:00.000Z","updated":"2023-05-01T14:28:03.219Z","comments":true,"path":"2023/01/12/Test-1/","link":"","permalink":"https://for-the-zero.github.io/2023/01/12/Test-1/","excerpt":"","text":"终于把这玩意搭建好了使用了Hexo和Github Pages 主题是hexo-theme-material，但是我涟漪效果呢？！ 由于不会搞懒得搞，有些功能是摆设，例如首页的搜索","categories":[{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/tags/%E5%85%B6%E4%BB%96/"}],"author":"for_the_zero"}],"categories":[{"name":"教程","slug":"教程","permalink":"https://for-the-zero.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/categories/%E5%85%B6%E4%BB%96/"},{"name":"Dev","slug":"Dev","permalink":"https://for-the-zero.github.io/categories/Dev/"}],"tags":[{"name":"科技","slug":"科技","permalink":"https://for-the-zero.github.io/tags/%E7%A7%91%E6%8A%80/"},{"name":"chatGPT","slug":"chatGPT","permalink":"https://for-the-zero.github.io/tags/chatGPT/"},{"name":"其它","slug":"其它","permalink":"https://for-the-zero.github.io/tags/%E5%85%B6%E5%AE%83/"},{"name":"其他","slug":"其他","permalink":"https://for-the-zero.github.io/tags/%E5%85%B6%E4%BB%96/"},{"name":"Python","slug":"Python","permalink":"https://for-the-zero.github.io/tags/Python/"},{"name":"Dev","slug":"Dev","permalink":"https://for-the-zero.github.io/tags/Dev/"}]}